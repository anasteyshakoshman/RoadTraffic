#pragma once
#include "Include.h"

class Map;

/// Автомобиль
class Car
{	
	/// Координата по оси Х 
	int X;

	/// Координата по оси Y
	int Y;

	/// Приращение по оси Х
	int dX;
		
	/// Приращение по оси У
	int dY;

	/// Скорость
	int Speed; 

	/// Направление
	int Direction;

	/// Спрайт обьекта
	sf::Sprite Sprite;

	/// Цвет
	sf::Color Color;
	bool ChangeDir;

	/// Жизнь
	bool Life;

	/// Время создания 
	int CreateTime;

	/// Период бездействия 
	int StopTime;

	/// Вектор, хранящий все обьекты данного класса
	static std::vector<Car> AllCars;

public:

	/// @param texture - текстура для спрайта обьекта
	/// @param col - цвет обьекта
	/// @param  window - окно 
	/// @param map - карта 
	Car(const sf::Texture & texture, sf::Color col, const Map & map, sf::RenderWindow & window);

	/// Дуструктор - обнуляет поля объекта
	~Car();

	/// Метод для получения статического вектора класса
	/// @return AllCars - статический вектор, хранящий все обьекты данного класса
	static std::vector<Car> & Vec();

	/// Метод движения и рисования обьекта
	/// @param map - карта 
	/// @param  window - окно 	
	/// @param  crash - возможность аварии	
	void go(sf::RenderWindow & window, const Map &  map, bool & crash);

	/// Метод определения возможных направлений движения обьекта
	/// @param map - карта 
	/// @return вектор возможных направлений движения обьекта
	std::vector<int> freeDirections(const Map &  map) const;

	/// Метод определения возможности двигаться в заданном направлении, проверяет возможность нахождения обьекта Crash по координатам обьекта данного класса
	/// @return true - можно двигаться
	/// @return false - движение запрещено
	bool crashAround() const;

	/// Метод определения возможности нахождения обьекта Sign, меняет скорость обьекта (Speed) на значение, заданное в Sign (Limit)
	/// @param map - карта 
	void signAround(const Map & map);

	/// Метод определения возможности двигаться в заданном направлении, проверяет возможность нахождения другого обьекта данного класса по координатам действующего обьекта  
	/// @return -1 - можно двигаться
	/// @return -2 - движение запрещено
	/// @return pos - позиция обьекта Car в векторе, хранящем все обьекты Car, движение разрешено
	int carAround(const Map & map, sf::RenderWindow & window, const bool crash);

	/// Метод определения возможности двигаться в заданном направлении, проверяет возможность нахождения обьекта TrafficLight по координатам обьекта данного класса
	/// @return true - можно двигаться
	/// @return false - движение запрещено
	bool lightAround(const Map & map) const;

	/// Метод, устанавливающий значение направления 
	/// @param direct - новое значение направления
	void setDirection(const int direct);

	/// Метод, устанавливающий значение скорости 
	/// @param newSpeed - новое значение скорости
	void setSpeed(const int newSpeed);

	/// Метод получения значения жизни 
	/// @return поле Life
	bool getLife() const;

	/// Метод получения значения скорости 
	/// @return скорость
	int getSpeed() const;
	
	/// Метод получения значения координаты по оси Х
	/// @return координата по оси Х
	int getX() const;

	/// Метод получения значения координаты по оси Y
	/// @return координата по оси Y
	int getY() const;

	/// Метод переводa координаты обьекта в доступную для подстановки в карту
	/// @return округленная координата по оси Х
	int mX() const;

	/// Метод переводa координаты обьекта в доступную для подстановки в карту
	/// @return округленная координата по оси Y
	int mY() const;

	/// Метод переводa приращения dX обьекта в доступную для подстановки в карту
	/// @return округленная координата по оси Х
	int mdX() const;

	/// Метод перевод приращения dY обьекта в доступную для подстановки в карту
	/// @return округленная координата по оси Y
	int mdY() const;

	/// Метод нахождения модуля значения переменной
	/// @param num - переменная, модуль которой надо найти
	/// @return модуль данной переменной
	int mod(const int num) const;

	/// Метод перевода координат в доступные для подстановки в карту, округление в меньшую сторону, если направление положительное, в большую, если отрицательное
	/// @param xy - координата
	/// @return округленная координата
	int okrugl(const int xy) const;
};