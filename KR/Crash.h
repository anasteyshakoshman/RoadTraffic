#pragma once
#include "Include.h"

/// Авария
class Crash
{
	/// Красный круг для анимации взрыва, расположенный по координатам первого автомобиля
	sf::CircleShape Red1;

	/// Красный круг для анимации взрыва, расположенный по координатам второго автомобиля
	sf::CircleShape Red2;

	/// Желтый круг для анимации взрыва, расположенный по координатам первого автомобиля
	sf::CircleShape Yellow1;

	/// Желтый круг для анимации взрыва, расположенный по координатам второго автомобиля
	sf::CircleShape Yellow2;

	/// Время анимации аварии
	int Time;

	/// Координата по оси Х первого автомобиля  
	int X1;
	
	/// Координата по оси У первого автомобиля  
	int Y1;

	/// Координата по оси Х второго автомобиля  
	int X2;

	/// Координата по оси У второго автомобиля  
	int Y2;

	/// Радиус красного круга
	int RadiusRed;
	
	/// Радиус желтого круга
	int RadiusYellow;

	/// Вектор, хранящий все обьекты данного класса
	static std::vector<Crash> AllCrash;

public:

	/// Инициализирует поля обьекта
	/// @param  window - окно 
	/// @param x1 - координата 1 по оси Х
	/// @param y1 - координата 1 по оси Y
	/// @param x2 - координата 2 по оси Х
	/// @param y2 - координата 2 по оси Y
	Crash(sf::RenderWindow & window, const int x1, const int y1, const int x2, const int y2);

	/// Деструктор - обнуляет поля обьекта
	~Crash();

	/// Метод для получения статического вектора класса
	/// @return AllCrash - статический вектор, хранящий все обьекты данного класса
	static std::vector<Crash> & Vec();

	/// Метод анимации врзыва 
	/// @param  window - окно 	
	/// @return время
	int work(sf::RenderWindow & window);

	/// Метод получения координаты 1 по оси Х
	/// @return X1 - координата 1 по оси Х
	int getX1() const;

	/// Метод получения координаты 1 по оси Y
	/// @return Y1 - координата 1 по оси Y
	int getY1() const;

	/// Метод получения координаты 2 по оси Х
	/// @return X2 - координата 2 по оси X
	int getX2() const;

	/// Метод получения координаты 2 по оси Y
	/// @return Y2 - координата 2 по оси Y
	int getY2() const;	
};

